module pattern_generator(
    input logic clk,
    input logic reset,
    input logic load,         // When high, generate a new pattern
    output logic [15:0] pattern
);

    // 4-bit LSFR to generate a random index (non-zero seed)
    logic [3:0] rand_index;
    always_ff @(posedge clk or posedge reset) begin
        if (reset)
            rand_index <= 4'd1;
        else if (load)
            rand_index <= {rand_index[2:0], rand_index[3] ^ rand_index[2]};
    end

    // ROM table of 16 fixed 16-bit patterns with exactly 8 ones.
    always_comb begin
        case(rand_index)

            4'd0:  pattern = 16'hC3A5;  //Pattern: 1100 0011 1010 0101 
            4'd1:  pattern = 16'hA5C3;  
            4'd2:  pattern = 16'h9C69;  
            4'd3:  pattern = 16'h66CC;  
            4'd4:  pattern = 16'hB66D;  
            4'd5:  pattern = 16'hD9B6;  
            4'd6:  pattern = 16'h5A3C;
            4'd7:  pattern = 16'h3C5A;
            4'd8:  pattern = 16'hF00F; // 1111 0000 0000 1111
            4'd9:  pattern = 16'h0FF0; // 0000 1111 1111 0000
            4'd10: pattern = 16'hC3C3; // 1100 0011 1100 0011
            4'd11: pattern = 16'h3C3C; // 0011 1100 0011 1100
            4'd12: pattern = 16'hC33C; // 1100 0011 0011 1100
            4'd13: pattern = 16'h3CC3; // 0011 1100 1100 0011
            4'd14: pattern = 16'hA5A5; // 1010 0101 1010 0101
            4'd15: pattern = 16'h5A5A; // 0101 1010 0101 1010
            default: pattern = 16'hFFFF; // Should never occur
        endcase
    end
endmodule
